<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="http://localhost:4000/tag/algorithm/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2021-11-30T23:33:52+09:00</updated>
  <id>http://localhost:4000/tag/algorithm/feed.xml</id>

  
  
  

  
    <title type="html">Backend Follow-up | </title>
  

  
    <subtitle>백엔드 개발자가 되기 위한 발자취를 남기는 곳</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">알고리즘 - 시간복잡도</title>
      <link href="http://localhost:4000/algorithm-time-complexity" rel="alternate" type="text/html" title="알고리즘 - 시간복잡도" />
      <published>2021-11-04T21:40:00+09:00</published>
      <updated>2021-11-04T21:40:00+09:00</updated>
      <id>http://localhost:4000/algorithm-time-complexity</id>
      <content type="html" xml:base="http://localhost:4000/algorithm-time-complexity">&lt;p&gt;&lt;i class=&quot;fa fa-search&quot;&gt; &lt;/i&gt; 
&lt;a href=&quot;https://ko.wikipedia.org/wiki/%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot;&gt; 알고리즘이란? &lt;/a&gt;
&lt;img src=&quot;../assets/built/images/algorithm.jpg&quot; alt=&quot;알고리즘 사진&quot; width=&quot;100%&quot; height=&quot;100%&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;알고리즘이란?&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
시간복잡도의 필요성 및 개념을 알기 전, 알고리즘이 무엇인지에 대해서부터 이해가 필요했다. 사전적 의미의 알고리즘은 다음과 같다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;알고리즘이란 어떠한 문제를 풀기위해서 정해진 일련의 절차 혹은 방법을 공식화한 형태로 표현한 것&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;조금 더 간단히 얘기하면, 어떠한 목적이 있고 이를 달성하기 위해서 거쳐야하는 과정이 존재하는데 이를 기술하는 것을 의미한다. 알고리즘 특성은 다음 조건들을 만족해야 한다.&lt;/p&gt;

&lt;ul class=&quot;data-contents&quot;&gt;
&lt;li&gt;입력 : 자료가 외부에서 하나 이상 제공되어야 한다.&lt;/li&gt;
&lt;li&gt;출력 : 알고리즘의 결과로 하나 이상의 값이 도출되어야 한다.&lt;/li&gt;
&lt;li&gt;유한성 : 알고리즘이 일정 작업이 지나면 종료되어야 한다. &lt;/li&gt;
&lt;li&gt;명확성 : 명확한 작업과, 각 단계마다 명확한 다음 단계를 가져야한다. &lt;/li&gt;
&lt;li&gt;효율성 : 실용적이여야 하며, 효율성이 높은 알고리즘일수록 가지가 높다. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
시간의 복잡도의 개념이 필요한 이유는 위에서 나열한 알고리즘 특성들 중 효율성과 관련이 있다. 효율성에서 볼 수 있듯, 같은 문제를 해결하는 알고리즘은은 여러 개가 존재하지만, 둘 중 효율적인 알고리즘이 더욱 우수한 알고리즘이라 할 수 있다. 효율적인 알고리즘(컴퓨터의 성능, 언어 등의 다른 변수가 동일하다면)일수록 컴퓨터가 빠르게 실행할 수 있다. 한편, 여러 알고리즘 중 효율적인 알고리즘이 무엇인지를 판단하기 위한 기준이 필요한데, 이때 필요한 개념이 시간복잡도와 공간복잡도이다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2&gt;시간복잡도&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
일반적으로 알고리즘의 복잡도는 시간복잡도와 공간복잡도로 평가를 하지만, 시간복잡도를 더 중요하게 평가한다. 요즘 많은 하드웨어들의 발달로 대용량의 메모리를 사용하는 것이 허용되기 때문에 시간복잡도를 위주로 판단한다.&lt;/p&gt;

&lt;h4&gt;복잡도 표기법&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;
시간 복잡도를 표현하는 알고리즘 표기법은 다음 세가지가 존재한다. 
&lt;br /&gt;&lt;/p&gt;
&lt;ul class=&quot;data-contents&quot;&gt;
    &lt;li&gt;최상(Best)의 경우 : 빅오메가(Big-Omega) 표기법&lt;/li&gt;
    &lt;li&gt;최악(Worst)의 경우 : 빅오(Big-O) 표기법&lt;/li&gt;
    &lt;li&gt;평균(Average)의 경우 : 빅세타(Big-theta) 표기법&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;
이 중 가장 일반적으로 판단하는 표기법은 최악의 경우로 판단하는 빅오 알고리즘이다. 동일한 알고리즘이라고 하더라도 입력에 따라서 도출되는 시간이 다르다.
따라서, 최상으로 판단하는 빅오메가의 경우는 의미없는 결과이며, 평균을 이용하는 빅세타의 경우에는 계산이 복잡하고, 알고리즘의 성능을 직접적으로 비교하기 쉽지 않다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;빅오 표기법의 수학적 정의&lt;/h4&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;n ≥ n&lt;sub&gt;o&lt;/sub&gt;인 모든 n에 대해서 kg(n) ≥ f(n)인 양수 k, n&lt;sub&gt;o&lt;/sub&gt;이 존재하면,  f(n)=O(g(n))이라고 표기한다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;../assets/built/images/time_complexity_bigo.png&quot; alt=&quot;알고리즘 사진&quot; width=&quot;40%&quot; height=&quot;40%&quot; /&gt;&lt;/p&gt;

&lt;p&gt;충분히 큰 입력값 n을 넣었을때, 실행시간(running time) f(n)은 최악의 경우에도 점근 상한선을 넘을 수 없다.&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h4&gt;빅오 표기법의 성능 차이&lt;/h4&gt;
&lt;ul class=&quot;data-contents&quot;&gt;
&lt;br /&gt;
    &lt;li&gt;Big(1) : 해결하는 과정이 하나인 성능 지표&lt;/li&gt;
    &lt;li&gt;Big(logN) : 해결하는 과정이 입력 개수가 증가함에 따라 감소하는 성능 지표&lt;/li&gt;
    &lt;li&gt;Big(N) : 해결 과정이 입력개수와 동일한 성능 지표&lt;/li&gt;
    &lt;li&gt;Big(N&lt;sup&gt;2&lt;/sup&gt;) : 해결 과정이 입력값의 제곱에 비례하는 성능 지표&lt;/li&gt;
    &lt;li&gt;Big(2&lt;sup&gt;N&lt;/sup&gt;) : 해결 과정이 입력의 지수승만큼 증가하는 성능 지표&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>sanghyoson</name>
        
        
      </author>

      

      
        <category term="algorithm" />
      

      
        <summary type="html">  알고리즘이란?</summary>
      

      
      
    </entry>
  
</feed>
